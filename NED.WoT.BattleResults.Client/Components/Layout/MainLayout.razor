@inherits LayoutComponentBase

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject SettingService SettingService
@inject UpdateCheckService UpdateCheckService

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@if (_isDarkMode)
{
    <style>
        .mud-table.player-table {
            --mud-palette-table-striped: rgba(0,0,0,.14);
        }

            .mud-table.player-table .mud-table-cell.sticky-left {
                background-color: none;
            }

            .mud-table.player-table .mud-table-body .mud-table-cell.sticky-left {
                background-color: var(--mud-palette-background-grey);
            }

            .mud-table.player-table .mud-table-head .mud-table-cell.sticky-left {
                background-color: #373740;
            }

            .mud-table.player-table .mud-table-body .mud-table-row:nth-of-type(odd) .mud-table-cell.sticky-left {
                background-color: #2f2f37;
            }

            .mud-table.player-table .mud-table-body .mud-table-row:nth-of-type(even) .mud-table-cell.sticky-left {
                background-color: #373740;
            }

        .group-info {
            background-color: #27272f;
        }

        .match-info {
            background-color: #373740;
        }

            .match-info:not(.selected):hover {
                background-color: #35353d !important;
            }

            .match-info.selected {
                background-color: #292930 !important;
            }

    </style>
}

<MudLayout>
    <MudAppBar>
        @{
            var clan = string.Empty;
            if (!string.IsNullOrEmpty(SettingService.Settings.ClanAbbreviation))
            {
                clan = $"[{SettingService.Settings.ClanAbbreviation}] ";
            }
        }
        <MudText Typo="Typo.h6"><span style="color: var(--mud-palette-primary)">@(clan)</span>WoT Gevecht Statistieken</MudText>
        <MudSpacer />
        @if (UpdateCheckService.UpdateAvailable)
        {
            <MudButton Variant="Variant.Outlined" OnClick="ShowUpdateDialog">Update</MudButton>
        }
        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Inherit" OnClick="Refresh" />
        <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.LightMode: Icons.Material.Filled.DarkMode)" Color="Color.Inherit" @onclick="SwitchDarkMode" />
        <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" OnClick="(e) => OpenSettings(true)" />
    </MudAppBar>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool _isDarkMode = true;
    private MudThemeProvider? _mudThemeProvider;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(SettingService.Settings.WotReplayDirectory) || !Directory.Exists(SettingService.Settings.WotReplayDirectory))
        {
            Snackbar.Add("Wot replay directory is niet ingevuld of bestaat niet", Severity.Warning);

            await Task.Delay(500);

            await OpenSettings(false);
        }

        UpdateCheckService.Start();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = SettingService.Settings.IsDarkMode;
            StateHasChanged();
        }
    }

    private void SwitchDarkMode()
    {
        _isDarkMode = !_isDarkMode;
        SettingService.Settings.IsDarkMode = _isDarkMode;
        SettingService.Save();
    }

    private void Refresh()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task OpenSettings(bool canCancel = true)
    {
        await DialogService.ShowAsync<SettingsDialog>("Instellingen", new DialogParameters()
            {
                ["canCancel"] = canCancel
            }, new DialogOptions()
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                BackdropClick = false,
                CloseButton = false
            });
    }

    private async Task ShowUpdateDialog()
    {
        await DialogService.ShowAsync<UpdateDialog>("Update", new DialogOptions()
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                BackdropClick = false,
                CloseButton = false
            });
    }
}