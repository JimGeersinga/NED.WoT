@page "/"
@using System.Collections.ObjectModel;
@using System.Collections.Specialized;
@using System.Diagnostics

@inject BattleReportService BattleResultService;
@inject SettingService SettingService;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService

<MudToolBar Style="background-color:var(--mud-palette-surface)">
    <MudGrid Justify="Justify.SpaceBetween">
        <MudItem sm="4" Class="d-flex align-center">
            <MudText Typo="Typo.subtitle1">Gevechten sinds @SettingService.Settings.LoadBattlesSince?.ToString("dd/MM/yyyy")</MudText>

            <MudButton Size="Size.Small" Class="ml-4" OnClick="OpenClanMembersDialog" Style="min-width: unset;" title="Clan leden">
                <MudImage Src="images/crew.png" Height="30" />
            </MudButton>

            @if (TankNameResolver.UndefinedTankNames.Any() || MapNameResolver.UndefinedMapNames.Any())
            {
                <MudButton Size="Size.Small" Class="ml-4" OnClick="OpenUndefinedNamesDialog" Style="min-width: unset;" title="Onbekende mappen en tanks">
                    <MudImage Src="images/CrewSkill_Commander_sixthSense.png" Height="30" />
                </MudButton>
            }
        </MudItem>
        <MudItem sm="4" Class="d-flex align-center">
            <MudAutocomplete T="SearchValue"
                             @bind-Value="_search"
                             SearchFunc="SearchAllAsync"
                             ToStringFunc="@(e=> e == null ? null : $"{e.Value} ({e.Type})")"
                             DebounceInterval="500"
                             Placeholder="Zoek op speler naam of clan tag"
                             Adornment="Adornment.Start"
                             AdornmentIcon="@Icons.Material.Filled.Search"
                             IconSize="Size.Medium"
                             Clearable="true"
                             Class="mt-0">
                <ItemTemplate Context="e">
                    <div class="d-flex justify-space-between align-center">
                        <MudText Typo="Typo.inherit">@e.Value</MudText>
                        <MudText Typo="Typo.caption">@e.Type</MudText>
                    </div>
                </ItemTemplate>
            </MudAutocomplete>
        </MudItem>
        <MudItem sm="4" Class="d-flex align-center justify-end gap-3">
            @if (_showDetailedInfo)
            {
                <div style="width: auto">
                    <MudAutocomplete @bind-Value="_detailedInfoForPlayer"
                                     SearchFunc="SearchPlayerAsync"
                                     DebounceInterval="500"
                                     Placeholder="Zoek speler"
                                     Adornment="Adornment.Start"
                                     AdornmentIcon="@Icons.Material.Filled.AutoGraph"
                                     AdornmentColor="Color.Primary"
                                     IconSize="Size.Medium"
                                     Dense="true"
                                     Margin="Margin.Dense"
                                     Clearable="true"
                                     FullWidth="false"
                                     Variant="Variant.Outlined"
                                     OnAdornmentClick="() => _showDetailedInfo = false"
                                     Class="mt-1"></MudAutocomplete>
                </div>
            }
            else
            {
                <MudIconButton Icon="@Icons.Material.Filled.AutoGraph" Color="Color.Default" OnClick="() => _showDetailedInfo = true" />
            }

            <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
                <MudButton>@_matchType.ToString()</MudButton>
                <MudMenu Icon="@Icons.Material.Filled.ArrowDropDown" Style="align-self: auto;">
                    @foreach (var matchType in Enum.GetValues<MatchType>())
                    {
                        <MudMenuItem OnClick="() => _matchType = matchType">@matchType.ToString()</MudMenuItem>
                    }
                </MudMenu>
            </MudButtonGroup>
        </MudItem>
    </MudGrid>
</MudToolBar>

<MudTable Items="@_reports"
          FixedHeader="true"
          FixedFooter="true"
          Dense="true"
          Hover="true"
          Virtualize="true"
          Bordered="true"
          Loading="@_loading"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupHeaderClass="group-info"
          RowClassFunc="@SelectedRowClass"
          Filter="new Func<BattleReport,bool>(TableFilter)"
          Height="calc(100vh - 128px);"
          Class="report-table"
          RowClass="@(SettingService.Settings.OnlyHighlistOwnMatches ? "highlight-own-result match-info" : "match-info")"
          GroupBy="@_groupDefinition"
          AllowUnsorted="false">
    <ColGroup>
        <col style="width: 50px" />
        <col style="width: 50px" />
        <col style="width: 150px;" />
        <col style="width: 150px;" />
        <col style="width: 100px;" />
        <col style="width: 200px;" />
        <col />
        @if (_showDetailedInfo)
        {
            <col style="width: 0px;" />
            <col style="width: 0px;" />
            <col style="width: 0px;" />
            <col style="width: 0px;" />
        }
        <col style="width: 50px" />
    </ColGroup>
    <HeaderContent>
        <MudTh Style="text-align:center; cursor: pointer;" @onclick="CollapseAllBattleReports"><MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowUp" OnClick="CollapseAllBattleReports" Variant="Variant.Text" Size="Size.Small" /></MudTh>
        <MudTh Style="text-align: center">#</MudTh>
        <MudTh Style="text-align: center"><MudTableSortLabel SortBy="new Func<BattleReport, object>(x=>x.MatchStart)">Start datum</MudTableSortLabel></MudTh>
        <MudTh Style="text-align: center"><MudTableSortLabel SortBy="new Func<BattleReport, object?>(x=>x.MatchEnd)">Eind datum</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<BattleReport, object?>(x=>x.MatchDuration)">Duratie</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<BattleReport, object?>(x=>x.MapName)">Map</MudTableSortLabel></MudTh>
        <MudTh>VS</MudTh>
        @if (_showDetailedInfo)
        {
            <MudTh Style="text-align: center">Shots</MudTh>
            <MudTh Style="text-align: center">Hits</MudTh>
            <MudTh Style="text-align: center">Pens</MudTh>
            <MudTh Style="text-align: center">Blocks</MudTh>
        }
        <MudTh Style="text-align: center">#</MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group " colspan="7">
            @{
                var wins = context.Items.Count(x => x.IsWin(SettingService.Settings));
                var loses = context.Items.Count(x => x.IsLose(SettingService.Settings));
                var draws = context.Items.Count(x => x.IsDraw());
                var unknowns = context.Items.Count(x => x.IsUnkown());

                var totalBattles = wins + loses + draws;
                var winPercentage = totalBattles > 0 ? (100m * wins / totalBattles) : 0m;
            }
            <div class="d-flex justify-space-between text-nowrap flex-nowrap">
                <MudText Typo="Typo.subtitle1" Class="d-inline"><b>@context.Key</b>, <b>@context.Items.Count()</b> gevechten <span class="ml-2 @winPercentage.GetWinRatioColor()">@winPercentage.ToString("0.00")%</span> </MudText>
                <div>
                    <MudText Typo="Typo.subtitle1" Class="d-inline mr-4">
                        <b class="@Result.Win.ToString()">@wins</b> Gewonnen
                        <span class="mx-2 grey-text text-darken-1">|</span>
                        <b class="@Result.Draw.ToString()">@draws</b> Gelijkspel
                        <span class="mx-2 grey-text text-darken-1">|</span>
                        <b class="@Result.Lose.ToString()">@loses</b> Verloren
                        <span class="mx-2 grey-text text-darken-1">|</span>
                        <b>@unknowns</b> Onbekend
                    </MudText>

                    <MudIconButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" Icon="@Icons.Material.Filled.ContentCopy" OnClick="(e) => CopyResultAsync(context.Items)" Style="float:right;" Disabled="(context.Items.Count() == 0)" />
                </div>
            </div>
        </MudTh>
        @if (_showDetailedInfo)
        {
            var players = context.Items.SelectMany(x => x.GetOwnTeam(SettingService.Settings)?.Players ?? []).ToList();

            if (!string.IsNullOrEmpty(_detailedInfoForPlayer))
            {
                players = players.Where(x => x.Name?.Equals(_detailedInfoForPlayer, StringComparison.OrdinalIgnoreCase) ?? false).ToList();
            }

            var totalLifeTime = players.Sum(x => x.LifeTime);
            var totalShots = players.Sum(x => x.Shots);
            var totalHits = players.Sum(x => x.DirectHits);
            var totalPens = players.Sum(x => x.Piercings);
            var totalShotsReceived = players.Sum(x => x.ShotsReceived);
            var totalBlocked = players.Sum(x => x.ShotsBlocked);

            var shotRatio = totalShots == 0 ? 0 : totalShots.GetValueOrDefault() / (totalLifeTime.GetValueOrDefault() / 60m);
            var hitRatio = totalShots == 0 ? 0 : (int)(100m / totalShots.GetValueOrDefault() * totalHits.GetValueOrDefault());
            var penRatio = totalHits == 0 ? 0 : (int)(100m / totalHits.GetValueOrDefault() * totalPens.GetValueOrDefault());
            var blockRatio = totalShotsReceived == 0 ? 0 : (int)(100m / totalShotsReceived.GetValueOrDefault() * totalBlocked.GetValueOrDefault());

            <MudTd Class="text-right">
                <div class="d-flex justify-space-between gap-1 text-nowrap">
                    @if (totalShots.HasValue)
                    {
                        var roundedRatio = Math.Round(shotRatio);

                        <span>@totalShots</span>
                        <span style="color: cornflowerblue">@(shotRatio < roundedRatio ? " < " : " > ") @roundedRatio p/m</span>
                    }
                </div>
            </MudTd>
            <MudTh>
                <div class="d-flex justify-space-between gap-1 text-nowrap">
                    <span>@totalHits</span>
                    <span style="color: @hitRatio.GetHitRatioColor() !important">@hitRatio%</span>
                </div>
            </MudTh>
            <MudTh>
                <div class="d-flex justify-space-between gap-1 text-nowrap">
                    <span>@totalPens</span>
                    <span style="color: @penRatio.GetPenRatioColor() !important">@penRatio%</span>
                </div>
            </MudTh>
            <MudTh>
                <div class="gap-1 text-nowrap" style="display: grid; grid-template-columns: 1fr auto 1fr 40px">
                    <span class="text-right">@totalBlocked</span>
                    <span class="mx-2 grey-text text-darken-1">/</span>
                    <span>@totalShotsReceived</span>
                    <span class="text-right" style="color: @blockRatio.GetBlockedRatioColor() !important">@blockRatio%</span>
                </div>
            </MudTh>
        }
        <MudTh />
    </GroupHeaderTemplate>
    <RowTemplate>
        @if (_loading)
        {
            <MudTd colspan="9">
                <MudSkeleton Animation="Animation.Wave" />
            </MudTd>
        }
        else if (context.Error != null)
        {
            <MudTd colspan="9"><MudAlert Severity="Severity.Warning">@context.Error</MudAlert></MudTd>
        }
        else
        {
            var group = _filteredReports.GroupBy(x => x.Group).First(x => x.Any(i => i.FileName == context.FileName)).OrderBy(x => x.MatchStart).ToList();
            var index = group.FindIndex(x => x.FileName == context.FileName) + 1;

            Team? ownTeam = context.GetOwnTeam(SettingService.Settings);
            var result = ownTeam?.ResultDisplay ?? "Onbekend";

            var id = $"Timestamp_{context.MatchStart.Ticks + context.MatchDuration.GetValueOrDefault()}_anchor";

            <MudTd Class="relative" @onclick="() => ToggleShowDetailsAsync(context)" Style="text-align:center;cursor: pointer">
                @if (context.ShowDetails)
                {
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.KeyboardArrowDown" Variant="Variant.Text" @onclick="() => ToggleShowDetailsAsync(context)" />
                }
                else
                {
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.KeyboardArrowRight" Variant="Variant.Text" @onclick="() => ToggleShowDetailsAsync(context)" />
                }
                <a id="@id" style="position: absolute; top:-80px;" />
            </MudTd>
            <MudTd Style="text-align:center;">@index</MudTd>
            <MudTd Style="text-align:center;" DataLabel="MatchStart">@context.MatchStart.ToString("dd/MM/yyyy HH:mm")</MudTd>
            <MudTd Style="text-align:center;" DataLabel="MatchEnd">@context.MatchEnd?.ToString("dd/MM/yyyy HH:mm")</MudTd>
            <MudTd DataLabel="Duration">@context.MatchDurationDisplay</MudTd>
            <MudTd DataLabel="MapName">@context.MapName @ownTeam?.Base</MudTd>
            <MudTd DataLabel="Versus" Class="versus-column">
                <div class="d-flex justify-space-between text-nowrap gap-2 mud-width-full">
                    <div class="versus-info">
                        <span class="team-name text-right @context.Team1.Result.ToString() @(ownTeam?.Number == 1? "highlight" : "")">@context.Team1.Abbreviation</span>
                        <span class="death-count text-right">@context.Team2.Players.Count(x => x.DeathReason.HasValue && x.DeathReason != -1)</span>
                        <span class="versus-text">
                            vs
                        </span>
                        <span class="death-count text-left">@context.Team1.Players.Count(x => x.DeathReason.HasValue && x.DeathReason != -1)</span>
                        <span class="team-name text-left @context.Team2.Result.ToString() @(ownTeam?.Number == 2? "highlight" : "")">@context.Team2.Abbreviation</span>
                    </div>
                    <div class="align-center d-flex gap-2">
                        <span class="@ownTeam?.Result.ToString()">@result</span>
                        <MudIconButton Variant="Variant.Outlined"
                                       Color="Color.Default"
                                       Size="Size.Small"
                                       Icon="@Icons.Material.Filled.ContentCopy"
                                       OnClick="(e) => CopyResultAsync(context, ownTeam)"
                                       Disabled="(ownTeam == null)" />
                    </div>
                </div>
            </MudTd>

            @if (_showDetailedInfo)
            {
                var players = ownTeam?.Players ?? [];

                if (!string.IsNullOrEmpty(_detailedInfoForPlayer))
                {
                    players = players.Where(x => x.Name?.Equals(_detailedInfoForPlayer, StringComparison.OrdinalIgnoreCase) ?? false).ToList();
                }

                var totalLifeTime = players.Sum(x => x.LifeTime);
                var totalShots = players.Sum(x => x.Shots);
                var totalHits = players.Sum(x => x.DirectHits);
                var totalPens = players.Sum(x => x.Piercings);
                var totalShotsReceived = players.Sum(x => x.ShotsReceived);
                var totalBlocked = players.Sum(x => x.ShotsBlocked);

                var shotRatio = totalShots == 0 ? 0 : totalShots.GetValueOrDefault() / (totalLifeTime.GetValueOrDefault() / 60m);
                var hitRatio = totalShots == 0 ? 0 : (int)(100m / totalShots.GetValueOrDefault() * totalHits.GetValueOrDefault());
                var penRatio = totalHits == 0 ? 0 : (int)(100m / totalHits.GetValueOrDefault() * totalPens.GetValueOrDefault());
                var blockRatio = totalShotsReceived == 0 ? 0 : (int)(100m / totalShotsReceived.GetValueOrDefault() * totalBlocked.GetValueOrDefault());

                <MudTd Class="text-right">
                    <div class="d-flex justify-space-between gap-1 text-nowrap">
                        @if (totalShots.HasValue)
                        {
                            var roundedRatio = Math.Round(shotRatio);

                            <span>@totalShots</span>
                            <span style="color: cornflowerblue">@(shotRatio < roundedRatio ? " < " : " > ") @roundedRatio p/m</span>
                        }
                    </div>
                </MudTd>
                <MudTd>
                    <div class="d-flex justify-space-between gap-1 text-nowrap">
                        <span>@totalHits</span>
                        <span style="color: @hitRatio.GetHitRatioColor() !important">@hitRatio%</span>
                    </div>
                </MudTd>
                <MudTd>
                    <div class="d-flex justify-space-between gap-1 text-nowrap">
                        <span>@totalPens</span>
                        <span style="color: @penRatio.GetPenRatioColor() !important">@penRatio%</span>
                    </div>
                </MudTd>
                <MudTd>
                    <div class="gap-1 text-nowrap" style="display: grid; grid-template-columns: 1fr auto 1fr 40px">
                        <span class="text-right">@totalBlocked</span>
                        <span class="mx-2 grey-text text-darken-1">/</span>
                        <span>@totalShotsReceived</span>
                        <span class="text-right" style="color: @blockRatio.GetBlockedRatioColor() !important">@blockRatio%</span>
                    </div>
                </MudTd>
            }
            <MudTd Style="text-align:center;">@index</MudTd>
        }
    </RowTemplate>
    <ChildRowContent>
        @if (context.ShowDetails)
        {
            string classes = "pa-4 mud-table-cell relative details ";
            classes += SettingService.Settings.OnlyHighlistOwnMatches ? "highlight-own-result" : string.Empty;

            <MudTr>
                <MudTd colspan="@(_showDetailedInfo ? 12 : 8)" class="@classes" data-report="@context.FileName">
                    <Details Report="@context" />
                </MudTd>
            </MudTr>
        }
    </ChildRowContent>
    <FooterContent>
        <MudTh colspan="7" Class="mud-background-gray">
            @{
                var wins = _filteredReports.Count(x => x.IsWin(SettingService.Settings));
                var loses = _filteredReports.Count(x => x.IsLose(SettingService.Settings));
                var draws = _filteredReports.Count(x => x.IsDraw());
                var unknowns = _filteredReports.Count(x => x.IsUnkown());

                var totalBattles = wins + loses + draws;
                var winPercentage = totalBattles > 0 ? (100m * wins / totalBattles) : 0m;
            }
            <div class="d-flex justify-space-between align-center">
                <MudText Typo="Typo.subtitle1" Class="d-inline text-bold">Totaal <b>@_filteredReports.Count()</b> gevechten  <span class="ml-2 @winPercentage.GetWinRatioColor()">@winPercentage.ToString("0.00")%</span></MudText>
                @if (_loadingTime != TimeSpan.Zero)
                {
                    <MudText Typo="Typo.subtitle2"> @_loadingTime.ToString(@"hh\:mm\:ss\.fff")</MudText>
                }
                <MudText Typo="Typo.subtitle1" Class="d-inline mr-12">
                    <b class="@Result.Win.ToString()">@wins</b> Gewonnen
                    <span class="mx-2 grey-text text-darken-1">|</span>
                    <b class="@Result.Draw.ToString()">@draws</b> Gelijkspel
                    <span class="mx-2 grey-text text-darken-1">|</span>
                    <b class="@Result.Lose.ToString()">@loses</b> Verloren
                    <span class="mx-2 grey-text text-darken-1">|</span>
                    <b>@unknowns</b> Onbekend
                </MudText>
            </div>
        </MudTh>

        @if (_showDetailedInfo)
        {
            var players = _filteredReports.SelectMany(x => x.GetOwnTeam(SettingService.Settings)?.Players ?? []);

            if (!string.IsNullOrEmpty(_detailedInfoForPlayer))
            {
                players = players.Where(x => x.Name?.Equals(_detailedInfoForPlayer, StringComparison.OrdinalIgnoreCase) ?? false).ToList();
            }

            var totalLifeTime = players.Sum(x => x.LifeTime);
            var totalShots = players.Sum(x => x.Shots);
            var totalHits = players.Sum(x => x.DirectHits);
            var totalPens = players.Sum(x => x.Piercings);
            var totalShotsReceived = players.Sum(x => x.ShotsReceived);
            var totalBlocked = players.Sum(x => x.ShotsBlocked);

            var shotRatio = totalShots == 0 ? 0 : totalShots.GetValueOrDefault() / (totalLifeTime.GetValueOrDefault() / 60m);
            var hitRatio = totalShots == 0 ? 0 : (int)(100m / totalShots.GetValueOrDefault() * totalHits.GetValueOrDefault());
            var penRatio = totalHits == 0 ? 0 : (int)(100m / totalHits.GetValueOrDefault() * totalPens.GetValueOrDefault());
            var blockRatio = totalShotsReceived == 0 ? 0 : (int)(100m / totalShotsReceived.GetValueOrDefault() * totalBlocked.GetValueOrDefault());

            <MudTh Class="text-right mud-background-gray">
                <div class="d-flex justify-space-between gap-1 text-nowrap">
                    @if (totalShots.HasValue)
                    {
                        var roundedRatio = Math.Round(shotRatio);

                        <span>@totalShots</span>
                        <span style="color: cornflowerblue">@(shotRatio < roundedRatio ? " < " : " > ") @roundedRatio p/m</span>
                    }
                </div>
            </MudTh>

            <MudTh Class="mud-background-gray">
                <div class="d-flex justify-space-between gap-1 text-nowrap">
                    @if (totalHits.HasValue)
                    {
                        <span>@totalHits</span>
                        <span style="color: @hitRatio.GetHitRatioColor() !important">@hitRatio%</span>
                    }
                </div>
            </MudTh>
            <MudTh Class="mud-background-gray">
                <div class="d-flex justify-space-between gap-1 text-nowrap">
                    @if (totalPens.HasValue)
                    {
                        <span>@totalPens</span>
                        <span style="color: @penRatio.GetPenRatioColor() !important">@penRatio%</span>
                    }
                </div>
            </MudTh>
            <MudTh Class="mud-background-gray">
                <div class="gap-1 text-nowrap" style="display: grid; grid-template-columns: 1fr auto 1fr 40px">
                    @if (totalBlocked.HasValue)
                    {
                        <span class="text-right">@totalBlocked</span>
                        <span class="mx-2 grey-text text-darken-1">/</span>
                        <span>@totalShotsReceived</span>
                        <span class="text-right" style="color: @blockRatio.GetBlockedRatioColor() !important">@blockRatio%</span>
                    }
                </div>
            </MudTh>
        }
        <MudTh colspan="1" Class="mud-background-gray" />
    </FooterContent>
</MudTable>

@code {

    public enum MatchType
    {
        All,
        Normal,
        Clan,
        Unknown
    }

    private bool _loading = true;
    private SearchValue? _search;
    private MatchType _matchType = MatchType.Clan;
    private TimeSpan _loadingTime = TimeSpan.Zero;

    private bool _showDetailedInfo = false;
    private string _detailedInfoForPlayer = string.Empty;

    private List<BattleReport> _reports = new List<BattleReport>();
    private IEnumerable<BattleReport> _filteredReports => _reports.Where(x => TableFilter(x));
    private TableGroupDefinition<BattleReport> _groupDefinition = new()
        {
            Indentation = false,
            Expandable = false,
            Selector = (e) => e.Group
        };

    protected override async Task OnInitializedAsync()
    {
        long timestamp = 0;

        BattleResultService.LoadingBattleReportsStarted += async (s, e) =>
        {
            await InvokeAsync(async () =>
            {
                _reports = new List<BattleReport>();
                _loading = true;
                timestamp = Stopwatch.GetTimestamp();
                StateHasChanged();

                while (_loading && SettingService.Settings.UpdateScreeenWhileLoading)
                {
                    await Task.Delay(500);
                    StateHasChanged();
                }
            });
        };

        BattleResultService.BattleReportAdded += async (s, e) =>
        {
            await InvokeAsync(() =>
            {
                _reports.Add(e.Report);
                _search = null;
                if (_loading)
                {
                    _loadingTime = Stopwatch.GetElapsedTime(timestamp);
                }
            });
        };

        BattleResultService.BattleReportRemoved += async (s, e) =>
        {
            await InvokeAsync(() =>
            {
                _reports.Remove(e.Report);
                StateHasChanged();
            });
        };

        BattleResultService.LoadingBattleReportsFinished += async (s, e) =>
        {
            await InvokeAsync(() =>
            {
                _reports = BattleResultService.BattleReports.Select(x => x.Value).OrderByDescending(x => x.MatchStart).ToList();
                _loading = false;
                _loadingTime = Stopwatch.GetElapsedTime(timestamp);
                StateHasChanged();
            });
        };

        BattleResultService.ClanMatchStarted += async (s, e) =>
        {
            await InvokeAsync(() =>
            {
                if (!SettingService.Settings.AutoClanLookup)
                {
                    return;
                }

                var clanToSearch = e.Item1 == SettingService.Settings.ClanAbbreviation ? e.Item2 : e.Item1;
                _search = new SearchValue(clanToSearch, "Clan");
                StateHasChanged();
            });
        };

        await Task.Run(() => BattleResultService.LoadBattleReports());

        _loading = false;
    }

    private string SelectedRowClass(BattleReport report, int rowNumber)
    {
        return report?.ShowDetails ?? false ? "selected" : string.Empty;
    }

    private bool TableFilter(BattleReport report)
    {
        bool show = false;

        var isNormalMatch = (report.Team1.Abbreviation == null || report.Team1.Abbreviation == "?") &&
                            (report.Team2.Abbreviation == null || report.Team2.Abbreviation == "?");

        if (_matchType is MatchType.Clan && isNormalMatch)
            show = false;
        else if (_matchType is MatchType.Normal && !isNormalMatch)
            show = false;
        else if (_matchType is MatchType.Unknown && !report.IsUnkown())
            show = false;
        else if (string.IsNullOrWhiteSpace(_search?.Value))
            show = true;
        else if (report.Team1.Abbreviation?.Equals(_search?.Value, StringComparison.OrdinalIgnoreCase) ?? false)
            show = true;
        else if (report.Team2.Abbreviation?.Equals(_search?.Value, StringComparison.OrdinalIgnoreCase) ?? false)
            show = true;
        else if (report.Team1.Players.Any(x => x.Name?.Equals(_search?.Value, StringComparison.OrdinalIgnoreCase) ?? false))
            show = true;
        else if (report.Team2.Players.Any(x => x.Name?.Equals(_search?.Value, StringComparison.OrdinalIgnoreCase) ?? false))
            show = true;

        return show;
    }

    private Task<IEnumerable<SearchValue>> SearchAllAsync(string value, CancellationToken token)
    {
        var playerNames = _reports
        .SelectMany(x => x.Team1.Players.Concat(x.Team2.Players))
        .Select(x => new SearchValue(x.Name, "Speler"))
        .Distinct();

        var teamNames = _reports
        .SelectMany(x => new[] { x.Team1.Abbreviation, x.Team2.Abbreviation })
        .Select(x => new SearchValue(x, "Clan"))
        .Distinct();

        var names = teamNames.Concat(playerNames);

        if (string.IsNullOrEmpty(value))
        {
            return Task.FromResult(names);
        }

        return Task.FromResult(names.Where(x => x?.Value?.Contains(value, StringComparison.InvariantCultureIgnoreCase) ?? false));
    }

    private Task<IEnumerable<string>> SearchPlayerAsync(string value, CancellationToken token)
    {
        var playerNames = _reports.SelectMany(x => x.Team1.Players.Concat(x.Team2.Players)).Select(x => x.Name ?? string.Empty).Distinct();
        if (string.IsNullOrEmpty(value))
        {
            return Task.FromResult(playerNames);
        }

        return Task.FromResult(playerNames.Where(x => x?.Contains(value, StringComparison.InvariantCultureIgnoreCase) ?? false));
    }

    private void CollapseAllBattleReports()
    {
        foreach (var report in _reports)
        {
            report.ShowDetails = false;
        }
    }

    private async Task ToggleShowDetailsAsync(BattleReport report)
    {
        if (!report.ShowDetails && SettingService.Settings.SingleBattleResultOpenedOnly)
        {
            CollapseAllBattleReports();
        }

        report.ShowDetails = !report.ShowDetails;
        if (report.ShowDetails)
        {
            await JSRuntime.InvokeVoidAsync("scrollIntoView", $"Timestamp_{report.MatchStart.Ticks + report.MatchDuration.GetValueOrDefault()}_anchor");
        }
    }

    private async Task CopyResultAsync(BattleReport report, Team? team)
    {
        await Clipboard.SetTextAsync(team?.GetResult(report.MapName) ?? string.Empty);
    }

    private async Task CopyResultAsync(IEnumerable<BattleReport> reports)
    {
        List<string?> results = reports.Select(x => x.GetOwnTeam(SettingService.Settings)?.GetResult(x.MapName)).Reverse().ToList();
        var splitResults = results
             .Select(r => r?.Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries) ?? [])
             .ToList();

        int maxLines = splitResults.Max(lines => lines.Length);

        IEnumerable<string> outputLines = Enumerable.Range(0, maxLines)
            .Select(i =>
            {
                var lineEntries = splitResults
                    .Select(lines => i < lines.Length ? lines[i] : string.Empty)
                    .ToArray();

                return string.Join("\t\t", lineEntries);
            });

        string output = string.Join(Environment.NewLine, outputLines);

        await Clipboard.SetTextAsync(output);
    }

    private async Task OpenUndefinedNamesDialog()
    {
        await DialogService.ShowAsync<UndefinedNamesDialog>("Onbekende namen", new DialogOptions { CloseOnEscapeKey = true });
    }

    private async Task OpenClanMembersDialog()
    {
        await DialogService.ShowAsync<ClanMembersDialog>("Clan leden",
            new DialogParameters<ClanMembersDialog>() { { x => x.Reports, _filteredReports } },
            new DialogOptions
                {
                    CloseOnEscapeKey = true,
                    FullWidth = true,
                    MaxWidth = MaxWidth.Small
                });
    }

    public record SearchValue(string? Value, string Type);
}