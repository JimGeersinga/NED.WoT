@inject SettingService SettingService
@inject IJSRuntime JSRuntime

<MudPaper Elevation="4" Outlined="true">
    <MudTable @ref="_tableRef"
              Items="@players"
              RowClassFunc="@HighlightPlayerClassFunc"
              GroupBy="@_groupDefinition"
              SortLabel="Sort By"
              GroupHeaderClass="teams"
              GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
              Class="player-table"
              Striped="true"
              Dense="true"
              Bordered="true"
              CustomHeader="true"
              AllowUnsorted="false">
        <ColGroup>
            <col style="width: 60px;" />
            <col style="width: 50px" />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTHeadRow Class="header-centered">
                <MudTh colspan="5" Class="sticky-left"></MudTh>
                <MudTh colspan="2">Prestatie</MudTh>
                <MudTh colspan="3">Schade</MudTh>
                <MudTh colspan="3">Schoten</MudTh>
            </MudTHeadRow>
            <MudTHeadRow>
                <MudTh Class="sticky-left" />
                <MudTh Class="sticky-left" Style="text-align: center">#</MudTh>
                <MudTh Class="sticky-left name"><MudTableSortLabel SortBy="new Func<Player, object>(x=>x.DisplayName)">Naam</MudTableSortLabel></MudTh>
                <MudTh Class="sticky-left vehicle"><MudTableSortLabel SortBy="new Func<Player, object?>(x=>x.Vehicle)">Tank</MudTableSortLabel></MudTh>
                <MudTh Class="sticky-left lifetime"><MudTableSortLabel SortBy="new Func<Player, object?>(x=>x.LifeTime)">Speeltijd</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortBy="new Func<Player, object?>(x=>x.ExperienceEarned)">XP</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Player, object?>(x=>x.Kills)">Kills</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Player, object?>(x=>x.DamageDealt)">Gedaan</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Player, object?>(x=>x.DamageBlocked)">Geblokt</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Player, object?>(x=>x.DamageReceived)">Ontvangen</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Player, object?>(x=>x.Shots)">Gelost</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Player, object?>(x=>x.DirectHits)">Geraakt</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Player, object?>(x=>x.Piercings)">Gepierced</MudTableSortLabel></MudTh>
            </MudTHeadRow>
        </HeaderContent>
        <GroupHeaderTemplate>
            @{
                Team? team = context.Key as Team;
                string classes = $"d-inline {team?.Result} ";
                classes += Report.GetOwnTeam(SettingService.Settings)?.Number == team?.Number ? "highlight" : string.Empty;
                bool isOwnTeam = team?.IsOwnTeam(SettingService.Settings) ?? false;
            }
            <MudTh colspan="14" Class="mud-table-cell-custom-group" data-ownteam="@isOwnTeam.ToString()">
                <MudText Typo="Typo.subtitle1" Class="@classes"><b>@(team?.Abbreviation ?? "?")</b></MudText>
            </MudTh>
        </GroupHeaderTemplate>
        <RowTemplate>
            @{
                decimal hpPercentage = Math.Round(context.MaxHealth.HasValue
                ? 100m / context.MaxHealth.GetValueOrDefault() * context.Health.GetValueOrDefault()
                : 0, 0);
                string style = context.DeathReason.HasValue && context.DeathReason != -1
                ? "background: #ff838340"
                : $"background: linear-gradient(90deg, #8cff8570 {hpPercentage}%, transparent 0%)";
            }
            <MudTd DataLabel="Number" Class="sticky-left" Style="text-align: center">@context.Number</MudTd>
            <MudTd DataLabel="Name" Class="no-break sticky-left name" Style="@style" title="@($"{context.Health} / {context.MaxHealth} HP | Alive: {context.LifeTime} seconds")">
                @context.DisplayName
            </MudTd>
            <MudTd DataLabel="Vehicle" Class="no-break sticky-left vehicle">@context.Vehicle</MudTd>
            <MudTd DataLabel="LifeTime" Class="no-break sticky-left lifetime text-right">
                @{
                    string duration = string.Empty;
                    if (context.LifeTime.HasValue)
                    {
                        TimeSpan time = new(context.LifeTime.Value * TimeSpan.TicksPerSecond);
                        string minutes = time.Minutes.ToString();
                        if (minutes.Length == 1)
                        {
                            minutes = "&nbsp;&nbsp;" + minutes;
                        }

                        string seconds = time.Seconds.ToString();
                        if (seconds.Length == 1)
                        {
                            seconds = "&nbsp;&nbsp;" + seconds;
                        }

                        duration = $"{minutes}m {seconds}s";
                    }
                }
                @((MarkupString)duration)
            </MudTd>
            <MudTd DataLabel="ExperienceEarned">@context.ExperienceEarned</MudTd>
            <MudTd DataLabel="Kills">@context.Kills</MudTd>
            <MudTd DataLabel="DamageDealt">@context.DamageDealt</MudTd>
            <MudTd DataLabel="DamageBlocked">
                <div class="text-nowrap d-flex justify-space-between gap-1">
                    @if (context.DamageBlocked.HasValue)
                    {
                        <div>@context.DamageBlocked</div>
                        <div class="gap-1" style="display: grid; grid-template-columns: 1fr auto 1fr 40px">
                            <span>@context.ShotsBlocked</span>
                            <span class="mx-2 grey-text text-darken-1">/</span>
                            <span>@context.ShotsReceived</span>
                            <span class="text-right" style="color: @context.BlockRatio.GetBlockedRatioColor() !important">@context.BlockRatio%</span>
                        </div>
                    }
                </div>
            </MudTd>
            <MudTd DataLabel="DamageReceived">@context.DamageReceived</MudTd>
            <MudTd DataLabel="Shots">
                <div class="d-flex justify-space-between gap-1 text-nowrap">
                    @if (context.Shots.HasValue)
                    {
                        var roundedRatio = Math.Round(context.ShotRatio);

                        <span>@context.Shots</span>
                        <span style="color: cornflowerblue">@(context.ShotRatio < roundedRatio ? " < " : " > ") @roundedRatio p/m</span>
                    }
                </div>
            </MudTd>
            <MudTd DataLabel="DirectHits">
                <div class="d-flex justify-space-between gap-1 text-nowrap">
                    @if (context.DirectHits.HasValue)
                    {
                        <span>@context.DirectHits</span>
                        <span style="color: @context.HitRatio.GetHitRatioColor() !important">@(context.HitRatio)%</span>
                    }
                </div>
            </MudTd>
            <MudTd DataLabel="Piercings">
                <div class="d-flex justify-space-between gap-1 text-nowrap">
                    @if (context.Piercings.HasValue)
                    {
                        <span>@context.Piercings</span>
                        <span style="color: @context.PenRatio.GetPenRatioColor() !important">@(context.PenRatio)%</span>
                    }
                </div>
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {
    [Parameter]
    public required BattleReport Report { get; set; }

    private MudTable<Player>? _tableRef;

    private IEnumerable<Player> players => Report.Team1.Players.Concat(Report.Team2.Players).OrderBy(x => x.Team?.Number);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("keepElementOffset", $".mud-table.player-table .sticky-left.name");
            await JSRuntime.InvokeVoidAsync("keepElementOffset", $".mud-table.player-table .sticky-left.vehicle");
            await JSRuntime.InvokeVoidAsync("openOwnTeam", $"[data-report='{Report.FileName}'] td:has(+ [data-ownteam='True']) button");
        }
    }

    private TableGroupDefinition<Player> _groupDefinition = new()
        {
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (e) => e.Team
        };

    private string HighlightPlayerClassFunc(Player player, int rowNumber)
    {
        if (player.Name != null && player.Name?.ToLower() == SettingService.Settings.PlayerName?.ToLower())
            return "highlight";

        if (player.IsTeamKiller.GetValueOrDefault())
            return "teamkiller";

        return string.Empty;
    }
}
